#!/usr/bin/env ruby
require 'rubygems'
require 'zlib'
require 'archive/tar/minitar'
require 'thor'
require 'aws/s3'
require 'yaml'
require 'remote_cp'

class Clipboard < Thor
  include Archive::Tar
  include AWS::S3
  
  def initialize(*args)
    @clipboard = RemoteCp::Clipboard.new
    super
  end
  
  desc "cp [FILENAME]", "copy FILENAME to the cloud. If FILENAME not given send STDIN to the cloud"
  def cp(filename = nil)
    type = 'file'
    content_type = nil 

    content = if filename.nil?
      basename = "anonymous"
      $stdin.read
    else
      full_path = File.expand_path(filename)
      basename = File.basename(full_path)
      if File.directory?(full_path)
        content_type = "application/gzip"
        io = StringIO.new("")
        tgz = Zlib::GzipWriter.new(io)
        Minitar.pack(basename, tgz)
        type = 'directory' 
        io.rewind
        io.string
      else
        type = 'file'
        File.open(full_path)
      end
    end
    @clipboard.push(content, basename, type, content_type)
  end
  
  desc "p", "paste from the cloud to current dir"
  def p
    file_name = @clipboard.filename
    if File.exist?(file_name)
      puts "#{file_name} already exist."
      print "Do you want to replace it (y/n)? "
      res = $stdin.gets.chomp
      return unless res == "y"
    end
    
    content = @clipboard.content

    case @clipboard.filetype
    when 'file'
      File.open(file_name, "w+") {|f| f << content}
      puts "#{file_name} copied."
    when 'directory'
      tgz = Zlib::GzipReader.new(StringIO.new(content))
      Minitar.unpack(tgz, ".")
    end
  end
  
  desc "fn", "Returns the file name of the copied file"
  def fn
    puts @clipboard.filename
  end

  desc "ft", "Returns the file type"
  def ft
    puts @clipboard.filetype
  end

  desc "cat", "Dump the copied file to stdout"
  def cat
    puts @clipboard.content
  end
end

Clipboard.start
