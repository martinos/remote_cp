#!/usr/bin/env ruby
require 'rubygems'
require 'zlib'
require 'archive/tar/minitar'
require 'thor'
require 'aws/s3'
require 'yaml'

class RemoteCp < Thor
  include Archive::Tar
      include AWS::S3
  
  def initialize(*args)
    AWS::S3::Base.establish_connection!(
        :access_key_id     => config[:access_key_id],
        :secret_access_key => config[:secret_access_key]
    )
    super
  end
  
  desc "cp [FILENAME]", "copy FILENAME to the cloud. If FILENAME not given send STDIN to the cloud"
  def cp(filename = nil)
    type = nil
    content_type = nil 

    content = if filename.nil?
      basename = "anonymous"
      $stdin.read
    else
      full_path = File.expand_path(filename)
      basename = File.basename(full_path)
      if File.directory?(full_path)
        content_type = "application/gzip"
        io = StringIO.new("")
        tgz = Zlib::GzipWriter.new(io)
        Minitar.pack(basename, tgz)
        type = 'directory' 
        io.rewind
        io.string
      else
        type = 'file'
        File.open(full_path)
      end
    end

    # I think that all this info should be included file's metadata
    S3Object.store("file_name.txt", basename, bucket_name)
    S3Object.store("content", content, bucket_name, :content_type => content_type)
    S3Object.store("type", type, bucket_name)
  end
  
  desc "p", "paste from the cloud to current dir"
  def p
    file_name = S3Object.find("file_name.txt", bucket_name).value
    type = S3Object.find("type", bucket_name).value

    if File.exist?(file_name)
      puts "#{file_name} already exist."
      print "Do you want to replace it (y/n)? "
      res = $stdin.gets.chomp
      return unless res == "y"
    end
     
    content = S3Object.find('content', bucket_name).value
    case type
    when 'file'
      File.open(file_name, "w+") {|f| f << content}
      puts "#{file_name} copied."
    when 'directory'
      tgz = Zlib::GzipReader.new(StringIO.new(content))
      Minitar.unpack(tgz, ".")
    end
  end
  
  desc "fn", "Returns the file name of the copied file"
  def fn
    puts rm_filename
  end

  desc "cat", "Dump the copied file to stdout"
  def cat
    puts rm_content
  end

private
  def bucket_name
    config[:bucket_name] 
  end

  def filename
    S3Object.find("file_name.txt", bucket_name).value
  end

  def rm_content
    S3Object.find('content', bucket_name).value
  end

  def config
    config_filename = File.join(ENV["HOME"], ".remote_cp.yml")

    @config ||= if File.exist?(config_filename)
      conf = Hash.new {|key, val| raise "Missing key #{key} in config file: #{config_filename}"} 
      conf.replace(YAML::load_file(config_filename))
    else
      config = {:access_key_id => "MY_ACCESS_KEY", :secret_access_key => "MY_SECRET", :bucket_name => "MY_BUCKET_NAME"}
      File.open(config_filename, "w") do |f| 
        f << YAML::dump(config)
      end
      File.chmod(0600, config_filename)
      raise "Please setup your .remote_cp.yml config file in your home dir."
    end
  end
end

RemoteCp.start
